# coding: utf-8

"""
    lunaform

    This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`.   # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    Contact: drew.sonne@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProvidersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_provider(self, **kwargs):  # noqa: E501
        """create_provider  # noqa: E501

        Upload a Terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_provider(async=True)
        >>> result = thread.get()

        :param async bool
        :param ResourceTfProvider terraform_provider: A terraform module
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_provider_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_provider_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_provider_with_http_info(self, **kwargs):  # noqa: E501
        """create_provider  # noqa: E501

        Upload a Terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_provider_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param ResourceTfProvider terraform_provider: A terraform module
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['terraform_provider']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_provider" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terraform_provider' in params:
            body_params = params['terraform_provider']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/providers/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTfProvider',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_provider_configuration(self, provider_name, provider_configuration, **kwargs):  # noqa: E501
        """create_provider_configuration  # noqa: E501

        Create a Terraform Provider Configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_provider_configuration(provider_name, provider_configuration, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider Name (required)
        :param ResourceTfProviderConfiguration provider_configuration: A terraform provider configuration (required)
        :return: ResourceTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_provider_configuration_with_http_info(provider_name, provider_configuration, **kwargs)  # noqa: E501
        else:
            (data) = self.create_provider_configuration_with_http_info(provider_name, provider_configuration, **kwargs)  # noqa: E501
            return data

    def create_provider_configuration_with_http_info(self, provider_name, provider_configuration, **kwargs):  # noqa: E501
        """create_provider_configuration  # noqa: E501

        Create a Terraform Provider Configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_provider_configuration_with_http_info(provider_name, provider_configuration, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider Name (required)
        :param ResourceTfProviderConfiguration provider_configuration: A terraform provider configuration (required)
        :return: ResourceTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'provider_configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_provider_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `create_provider_configuration`")  # noqa: E501
        # verify the required parameter 'provider_configuration' is set
        if ('provider_configuration' not in params or
                params['provider_configuration'] is None):
            raise ValueError("Missing the required parameter `provider_configuration` when calling `create_provider_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_name' in params:
            path_params['provider-name'] = params['provider_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'provider_configuration' in params:
            body_params = params['provider_configuration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{provider-name}/configurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTfProviderConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_provider(self, name, **kwargs):  # noqa: E501
        """delete_provider  # noqa: E501

        Delete a terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_provider(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Unique identifier for this provider (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_provider_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_provider_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_provider_with_http_info(self, name, **kwargs):  # noqa: E501
        """delete_provider  # noqa: E501

        Delete a terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_provider_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Unique identifier for this provider (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_provider_configuration(self, provider_name, id, **kwargs):  # noqa: E501
        """delete_provider_configuration  # noqa: E501

        Delete a terraform provider configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_provider_configuration(provider_name, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider ID (required)
        :param str id: Configuration for a Terraform Provider (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_provider_configuration_with_http_info(provider_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_provider_configuration_with_http_info(provider_name, id, **kwargs)  # noqa: E501
            return data

    def delete_provider_configuration_with_http_info(self, provider_name, id, **kwargs):  # noqa: E501
        """delete_provider_configuration  # noqa: E501

        Delete a terraform provider configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_provider_configuration_with_http_info(provider_name, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider ID (required)
        :param str id: Configuration for a Terraform Provider (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_provider_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `delete_provider_configuration`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_provider_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_name' in params:
            path_params['provider-name'] = params['provider_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{provider-name}/configuration/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider(self, name, **kwargs):  # noqa: E501
        """get_provider  # noqa: E501

        Get Terraform Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_provider(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Terraform Provider Name (required)
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_provider_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_provider_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_provider  # noqa: E501

        Get Terraform Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_provider_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Terraform Provider Name (required)
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTfProvider',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_provider_configuration(self, provider_name, id, **kwargs):  # noqa: E501
        """get_provider_configuration  # noqa: E501

        Get Configuration for Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_provider_configuration(provider_name, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider ID (required)
        :param str id: Configuration for a Terraform Provider (required)
        :return: ResourceTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_provider_configuration_with_http_info(provider_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_provider_configuration_with_http_info(provider_name, id, **kwargs)  # noqa: E501
            return data

    def get_provider_configuration_with_http_info(self, provider_name, id, **kwargs):  # noqa: E501
        """get_provider_configuration  # noqa: E501

        Get Configuration for Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_provider_configuration_with_http_info(provider_name, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider ID (required)
        :param str id: Configuration for a Terraform Provider (required)
        :return: ResourceTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provider_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `get_provider_configuration`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_provider_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_name' in params:
            path_params['provider-name'] = params['provider_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{provider-name}/configuration/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTfProviderConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_provider_configurations(self, provider_name, **kwargs):  # noqa: E501
        """list_provider_configurations  # noqa: E501

        List Configurations for s Terraform Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_provider_configurations(provider_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider Name (required)
        :return: ResponseListTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_provider_configurations_with_http_info(provider_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_provider_configurations_with_http_info(provider_name, **kwargs)  # noqa: E501
            return data

    def list_provider_configurations_with_http_info(self, provider_name, **kwargs):  # noqa: E501
        """list_provider_configurations  # noqa: E501

        List Configurations for s Terraform Provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_provider_configurations_with_http_info(provider_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider_name: Terraform Provider Name (required)
        :return: ResponseListTfProviderConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_provider_configurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_name' is set
        if ('provider_name' not in params or
                params['provider_name'] is None):
            raise ValueError("Missing the required parameter `provider_name` when calling `list_provider_configurations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_name' in params:
            path_params['provider-name'] = params['provider_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{provider-name}/configurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseListTfProviderConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_providers(self, **kwargs):  # noqa: E501
        """list_providers  # noqa: E501

        List Terraform Providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_providers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ResponseListTfProviders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_providers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_providers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_providers_with_http_info(self, **kwargs):  # noqa: E501
        """list_providers  # noqa: E501

        List Terraform Providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_providers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: ResponseListTfProviders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/providers/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseListTfProviders',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_provider(self, name, **kwargs):  # noqa: E501
        """update_provider  # noqa: E501

        Update a Terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_provider(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Terraform Provider ID (required)
        :param ResourceTfProvider terraform_provider: A terraform provider
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_provider_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_provider_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def update_provider_with_http_info(self, name, **kwargs):  # noqa: E501
        """update_provider  # noqa: E501

        Update a Terraform provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_provider_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Terraform Provider ID (required)
        :param ResourceTfProvider terraform_provider: A terraform provider
        :return: ResourceTfProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'terraform_provider']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terraform_provider' in params:
            body_params = params['terraform_provider']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.lunaform.v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api-key']  # noqa: E501

        return self.api_client.call_api(
            '/tf/provider/{name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTfProvider',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
