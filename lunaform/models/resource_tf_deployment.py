# coding: utf-8

"""
    lunaform

    This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`.   # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    Contact: drew.sonne@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hal_rsc_links import HalRscLinks  # noqa: F401,E501


class ResourceTfDeployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'HalRscLinks',
        'id': 'str',
        'status': 'str',
        'workspace': 'str'
    }

    attribute_map = {
        'links': '_links',
        'id': 'id',
        'status': 'status',
        'workspace': 'workspace'
    }

    def __init__(self, links=None, id=None, status=None, workspace=None):  # noqa: E501
        """ResourceTfDeployment - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._id = None
        self._status = None
        self._workspace = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if workspace is not None:
            self.workspace = workspace

    @property
    def links(self):
        """Gets the links of this ResourceTfDeployment.  # noqa: E501


        :return: The links of this ResourceTfDeployment.  # noqa: E501
        :rtype: HalRscLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ResourceTfDeployment.


        :param links: The links of this ResourceTfDeployment.  # noqa: E501
        :type: HalRscLinks
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this ResourceTfDeployment.  # noqa: E501


        :return: The id of this ResourceTfDeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceTfDeployment.


        :param id: The id of this ResourceTfDeployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this ResourceTfDeployment.  # noqa: E501


        :return: The status of this ResourceTfDeployment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResourceTfDeployment.


        :param status: The status of this ResourceTfDeployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYING", "SUCCESS", "FAIL"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def workspace(self):
        """Gets the workspace of this ResourceTfDeployment.  # noqa: E501


        :return: The workspace of this ResourceTfDeployment.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this ResourceTfDeployment.


        :param workspace: The workspace of this ResourceTfDeployment.  # noqa: E501
        :type: str
        """

        self._workspace = workspace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTfDeployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
