# coding: utf-8

"""
    lunaform

    This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`.   # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    Contact: drew.sonne@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hal_rsc_links import HalRscLinks  # noqa: F401,E501


class ResourceTfStateBackend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'HalRscLinks',
        'name': 'str',
        'id': 'str',
        'configuration': 'object'
    }

    attribute_map = {
        'links': '_links',
        'name': 'name',
        'id': 'id',
        'configuration': 'configuration'
    }

    def __init__(self, links=None, name=None, id=None, configuration=None):  # noqa: E501
        """ResourceTfStateBackend - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._name = None
        self._id = None
        self._configuration = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if configuration is not None:
            self.configuration = configuration

    @property
    def links(self):
        """Gets the links of this ResourceTfStateBackend.  # noqa: E501


        :return: The links of this ResourceTfStateBackend.  # noqa: E501
        :rtype: HalRscLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ResourceTfStateBackend.


        :param links: The links of this ResourceTfStateBackend.  # noqa: E501
        :type: HalRscLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this ResourceTfStateBackend.  # noqa: E501


        :return: The name of this ResourceTfStateBackend.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceTfStateBackend.


        :param name: The name of this ResourceTfStateBackend.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this ResourceTfStateBackend.  # noqa: E501


        :return: The id of this ResourceTfStateBackend.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceTfStateBackend.


        :param id: The id of this ResourceTfStateBackend.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def configuration(self):
        """Gets the configuration of this ResourceTfStateBackend.  # noqa: E501


        :return: The configuration of this ResourceTfStateBackend.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ResourceTfStateBackend.


        :param configuration: The configuration of this ResourceTfStateBackend.  # noqa: E501
        :type: object
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTfStateBackend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
