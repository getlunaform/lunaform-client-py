# coding: utf-8

"""
    lunaform

    This is a RESTful server for managing Terraform plan and apply jobs and the auditing of actions to approve those apply jobs. The inspiration for this project is the AWS CloudFormation API's. The intention is to implement a locking mechanism not only for the terraform state, but for the plan and apply of terraform modules. Once a `module` plan starts, it is instantiated as a `stack` within the nomencalture of `lunaform`.   # noqa: E501

    OpenAPI spec version: 0.0.1-alpha
    Contact: drew.sonne@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.hal_rsc_links import HalRscLinks  # noqa: F401,E501
from swagger_client.models.resource_list_tf_stack import ResourceListTfStack  # noqa: F401,E501


class ResourceTfModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'HalRscLinks',
        'embedded': 'ResourceListTfStack',
        'id': 'str',
        'name': 'str',
        'source': 'str',
        'type': 'str'
    }

    attribute_map = {
        'links': '_links',
        'embedded': '_embedded',
        'id': 'id',
        'name': 'name',
        'source': 'source',
        'type': 'type'
    }

    def __init__(self, links=None, embedded=None, id=None, name=None, source=None, type=None):  # noqa: E501
        """ResourceTfModule - a model defined in Swagger"""  # noqa: E501

        self._links = None
        self._embedded = None
        self._id = None
        self._name = None
        self._source = None
        self._type = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded
        if id is not None:
            self.id = id
        self.name = name
        self.source = source
        self.type = type

    @property
    def links(self):
        """Gets the links of this ResourceTfModule.  # noqa: E501


        :return: The links of this ResourceTfModule.  # noqa: E501
        :rtype: HalRscLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ResourceTfModule.


        :param links: The links of this ResourceTfModule.  # noqa: E501
        :type: HalRscLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this ResourceTfModule.  # noqa: E501


        :return: The embedded of this ResourceTfModule.  # noqa: E501
        :rtype: ResourceListTfStack
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this ResourceTfModule.


        :param embedded: The embedded of this ResourceTfModule.  # noqa: E501
        :type: ResourceListTfStack
        """

        self._embedded = embedded

    @property
    def id(self):
        """Gets the id of this ResourceTfModule.  # noqa: E501


        :return: The id of this ResourceTfModule.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceTfModule.


        :param id: The id of this ResourceTfModule.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ResourceTfModule.  # noqa: E501


        :return: The name of this ResourceTfModule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceTfModule.


        :param name: The name of this ResourceTfModule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source(self):
        """Gets the source of this ResourceTfModule.  # noqa: E501


        :return: The source of this ResourceTfModule.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResourceTfModule.


        :param source: The source of this ResourceTfModule.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def type(self):
        """Gets the type of this ResourceTfModule.  # noqa: E501


        :return: The type of this ResourceTfModule.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceTfModule.


        :param type: The type of this ResourceTfModule.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["git", "registry", "enterprise"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceTfModule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
